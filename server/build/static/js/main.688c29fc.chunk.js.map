{"version":3,"sources":["components/CustomerForm.js","components/CustomerDisplay.js","App.js","serviceWorker.js","index.js"],"names":["CustomerForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","email","setState","_this2","_this$state","_this$props","props","postCustomer","message","react_default","a","createElement","className","onSubmit","e","preventDefault","index_esm","value","onChange","handleName","target","handleEmail","style","color","textShadow","Component","CustomerDisplay","customers","deleteCustomer","updateCustomer","mappedCustomers","map","element","key","_id","Date","date_joined","toLocaleDateString","onClick","margin","padding","fontSize","borderBottom","App","bind","assertThisInitialized","getCustomers","axios","get","then","res","data","catch","err","response","post","_this3","id","_this4","console","log","put","concat","_this5","delete","CustomerForm_CustomerForm","components_CustomerDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.688c29fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { MdPersonAdd } from \"react-icons/md\";\nexport default class CustomerForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      email: \"\"\n    };\n  }\n\n  handleName(name) {\n    this.setState({\n      name: name\n    });\n  }\n\n  handleEmail(email) {\n    this.setState({\n      email: email\n    });\n  }\n\n  render() {\n    const { name, email } = this.state;\n    const { postCustomer, message } = this.props;\n    return (\n      <div className=\"customer-form\">\n        <form\n          onSubmit={e => {\n            e.preventDefault();\n            postCustomer(name, email);\n          }}\n        >\n          <h1>\n            <span> Add A Customer</span> <MdPersonAdd />\n          </h1>\n          <div>\n            <label>Name</label>\n            <input\n              value={name}\n              onChange={e => this.handleName(e.target.value)}\n            />\n          </div>\n          <div>\n            <label>Email</label>\n            <input\n              value={email}\n              onChange={e => this.handleEmail(e.target.value)}\n            />\n          </div>\n          <button>Submit</button>\n        </form>\n        <span style={{ color: \"#F26549\", textShadow: \"1px 1px 2px black\" }}>\n          {message}\n        </span>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { MdPerson } from \"react-icons/md\";\nclass CustomerDisplay extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: \"\"\n    };\n  }\n  render() {\n    const { customers, deleteCustomer, updateCustomer } = this.props;\n    const { email } = this.state;\n    const mappedCustomers = customers.map(element => {\n      return (\n        <div key={element._id} className=\"customer\">\n          <div>\n            <div>\n              <span className=\"icon\">\n                <MdPerson />\n              </span>\n              <div>\n                <span>Name: </span> <span className=\"data\">{element.name}</span>\n              </div>\n              <div>\n                <span>Email: </span>\n                <span className=\"data\">{element.email}</span>\n              </div>\n              <div>\n                <span>Date Joined: </span>\n                <span className=\"data\">\n                  {new Date(element.date_joined).toLocaleDateString()}\n                </span>\n              </div>\n            </div>\n            <div>\n              <button onClick={() => deleteCustomer(element._id)}>\n                Delete\n              </button>\n            </div>\n          </div>\n          <details>\n            <summary>Update Customer Info</summary>\n            <div>\n              <div>\n                <label>New Email: </label>\n                <input\n                  value={email}\n                  onChange={e => this.setState({ email: e.target.value })}\n                />\n              </div>\n              <button\n                className=\"update\"\n                onClick={() => {\n                  updateCustomer(element._id, email);\n                  this.setState({ email: \"\" });\n                }}\n              >\n                Update\n              </button>\n            </div>\n          </details>\n        </div>\n      );\n    });\n    return (\n      <div className=\"customer-container\">\n        <h1\n          style={{\n            color: \"#545454\",\n            margin: \"5px 15px 10px\",\n            padding: \"5px 0 15px 0\",\n            fontSize: \"52px\",\n            borderBottom: \"#545454 solid 2px\"\n          }}\n        >\n          Customer List\n        </h1>\n        {mappedCustomers}\n      </div>\n    );\n  }\n}\n\nexport default CustomerDisplay;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CustomerForm from \"./components/CustomerForm\";\nimport CustomerDisplay from \"./components/CustomerDisplay\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      customers: [],\n      message: \"\"\n    };\n    this.deleteCustomer = this.deleteCustomer.bind(this);\n    this.postCustomer = this.postCustomer.bind(this);\n    this.updateCustomer = this.updateCustomer.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCustomers();\n  }\n\n  getCustomers() {\n    axios\n      .get(\"/api/customer\")\n      .then(res => {\n        this.setState({\n          customers: res.data\n        });\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data\n        });\n      });\n  }\n\n  async postCustomer(name, email) {\n    axios\n      .post(\"/api/customer\", { name, email })\n      .then(res => {\n        this.setState({\n          customers: res.data,\n          message: \"\"\n        });\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data\n        });\n      });\n  }\n\n  updateCustomer(id, email) {\n    console.log(id, email);\n    axios\n      .put(`/api/customer/${id}?email=${email}`)\n      .then(res => {\n        this.setState({\n          customers: res.data,\n          message: \"\"\n        });\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data\n        });\n      });\n  }\n\n  deleteCustomer(id) {\n    axios\n      .delete(`/api/customer/${id}`)\n      .then(res => {\n        this.setState({\n          customers: res.data\n        });\n      })\n      .catch(err => {\n        this.setState({\n          message: err.response.data\n        });\n      });\n  }\n\n  render() {\n    const { customers, message } = this.state;\n\n    return (\n      <div className=\"App\">\n        <CustomerForm postCustomer={this.postCustomer} message={message} />\n        <CustomerDisplay\n          customers={customers}\n          deleteCustomer={this.deleteCustomer}\n          updateCustomer={this.updateCustomer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}